basis <- readRDS("data/cell_basis_trait_projection.RDS")
View(basis)
library(data.table)
pt <- fread("../Bases/Projections/Projection_cell_basis_v3_20210325-v1.tsv")
View(pt)
pt <- pt[grepl("Astle", Trait)]
pt[gsub("([A-Z]+)_.+", "\\1",Trait, perl = TRUE)]
pt[,gsub("([A-Z]+)_.+", "\\1",Trait, perl = TRUE)]
pt[gsub("([A-Z]+)_.+", "\\1",Trait, perl = TRUE),]
pt[, Trait:=gsub("([A-Z]+)_.+", "\\1",Trait, perl = TRUE)]
pt
load("data/cell-basis-sparse-1.0.RData")
project_sparse
pt
pt[,.(Var.Delta,z,P):=NULL]
pt[,c(Var.Delta,z,P):=NULL]
pt
pt[,c("Var.Delta","z","P"):=NULL]
setnames(pt, "Delta","delta")
pt
pt
saveRDS(pt, "data/cell_basis_trait_projection_v3.RDS")
dictionary <- read.table("../cell_basis_v2/Astle_dict.txt", header = T, sep = "\t")
knitr::kable(dictionary)
library(data.table)
library(magrittr)
library(pheatmap)
library(reshape2)
library(ggplot2)
library(cowplot)
library(ggrepel)
library(gridExtra)
library(stringr)
library(chromoMap)
load("../../cell_basis_v3_varimax/basis_building/cell-basis-sparse-3.0.RData")
proj.table <- fread("../../Projections/Projection_cell_basis_v3_20210325-v1.tsv")
QC.table <- fread("../../Projections/QC_cell_basis_v3_20210325-v1.tsv")
metadata <- fread("../Metadata_20210422-v1.tsv")
QC.table <- merge.data.table(QC.table, metadata, all.x = TRUE)
# Load the SNPs required to create the QC plots
SNP.QC <- fread("../../QCplots/BCB_SNPfiltered_20210419.tsv")
if(is.character(proj.table$Var.Delta)){
proj.table$Var.Delta <- as.numeric(proj.table$Var.Delta)
}
# Note HBC_Chen_6 and EOSC_Chen_3 have some issues that I couldn't resolve so far, so I'll exclude it
##### & Trait!="EOSC_Chen_32888493_3"
QC.table <- QC.table[Trait!="HBC_Chen_32888493_6" ,]
proj.table <- proj.table[Trait!="HBC_Chen_32888493_6",]
hist(QC.table$nSNP, main = "Number of matching SNPs (All files)", xlab = "N matching SNPs", breaks = 50 )
summary(QC.table)
knitr::kable(QC.table[is.na(QC.table$overall_p),])
QC.table <- QC.table[!is.na(QC.table$overall_p),]
c(lessthan95 = nrow(QC.table[QC.table$nSNP < nrow(SNP.manifest)*.95,]), lessthan80 = nrow(QC.table[QC.table$nSNP < nrow(SNP.manifest)*.8,]), lessthan50 = nrow(QC.table[QC.table$nSNP < nrow(SNP.manifest)*.5,]))
c(lessthan95 = nrow(QC.table[QC.table$nSNP < nrow(SNP.manifest)*.95,])/nrow(QC.table), lessthan80 = nrow(QC.table[QC.table$nSNP < nrow(SNP.manifest)*.8,])/nrow(QC.table), lessthan50 = nrow(QC.table[QC.table$nSNP < nrow(SNP.manifest)*.5,])/nrow(QC.table))
# Extract basis projections for later
PT.basis <- proj.table[grepl("_Astle_", Trait)][,Trait:=gsub("([A-Z]+)_.+", "\\1", Trait, perl = TRUE)]
PT.basis <- merge(PT.basis, unique(QC.table[, c("Trait_ID_2.0", "Trait_long")]), by.x = "Trait", by.y = "Trait_ID_2.0")
PT.basis[,Label:=Trait_long][, stars:=""][, c("Var.Delta", "z", "P") := NULL]
# Remove Immunochip datasets and those with <80% SNP match
QC.filt <- QC.table[QC.table$nSNP >= max(QC.table$nSNP) * 0.8 & !grepl("ImmunoChip",QC.table$Chip, ignore.case = TRUE), ]
# Remove  FinnGenR2, Astle (since we used them to build the basis), and UKBB
QC.filt <- QC.filt[!grepl("UKBB|FinnGenR2|Astle", Trait, perl = TRUE)]
# Check number of datasets per category, and keep IMD, BMK, and INF only
#table(QC.filt$Trait_class)
QC.filt <- QC.filt[Trait_class %in% c("IMD", "INF", "BMK", "OTH")]
table(QC.filt$Trait_class)
# Create filtered projection table too
PT.filt <- merge(proj.table, QC.filt[,c("First_Author","Trait", "Trait_ID_2.0", "Trait_long","Trait_class", "Collection", "Population")], by = "Trait")
# Apply 1% FDR correction to overall p for all remaining datasets
QC.filt[, FDR.overall := p.adjust(overall_p, method = "BH"), by="Trait_class"]
QC.sig <- QC.filt[FDR.overall < 0.01,]
table(QC.sig$Trait_class)
# Apply 5% FDR correction by trait and PC to projections, then filter by overall significant traits
PT.filt[, FDR.PC:=p.adjust(P, method = "BH"), by = c("PC", "Trait_class")][, stars:=ifelse(!is.na(FDR.PC) & FDR.PC<0.05,"â€¢","")]
# Filter PT80 by overall significant traits
PT.sig <- PT.filt[Trait %in% QC.sig$Trait,]
# Keep only significant datasets
SNP.QC <- SNP.QC[filename %in% QC.sig$Trait]
seplots <- lapply(unique(SNP.QC$SNPID), function(snp){
snp.subset <- SNP.QC[SNPID == snp,]
snp.subset <- na.omit(snp.subset, cols= c("SE","N0N1Calc"))
snp.subset <- snp.subset[SE != 0,]
lm.snp.subset <- lm(log(SE) ~ log(N0N1Calc), data = snp.subset)
cooksd <- cooks.distance(lm.snp.subset)
sample_size  <- nrow(snp.subset)
is.outlier <- cooksd > 0.01 # since 4/sample_size was too low
p  <- ggplot(snp.subset, aes(x = log(N0N1Calc), y = log(SE), colour = BETA, label = filename)) +
geom_point()+
geom_point(data = snp.subset[is.outlier,], color = "red")+
geom_text_repel(size = 3.2, colour="black", data = snp.subset[is.outlier,], force = 8, box.padding=0.5, seed=4)+
labs(title = snp)+
theme_classic()
})
zplots <- lapply(unique(SNP.QC$SNPID), function(snp){
snp.subset <- SNP.QC[SNPID == snp,]
z <- ggplot(snp.subset, aes(x = BETA, y = abs(Z), label = filename)) +
geom_point()+
geom_text_repel(size = 3.2, colour="black", data = subset(snp.subset,abs(BETA)>0.5*max(abs(BETA))), force = 8, box.padding=0.5, seed=4)+
geom_vline(xintercept = 0, linetype = "dashed", colour = "red")+
geom_hline(aes(yintercept =5), linetype = "dashed", colour = "red")+
labs(title = snp)+
theme_classic()
})
plot_grid(plotlist=seplots, ncol=2)
plot_grid(plotlist=zplots, ncol=2)
# unwanted <- "FinnGenR2|UKBB|Astle|Chen_32888493_6|ASTHMA_CHILD_EXMORE_FinnGen_FinnGenR3_1|EOSC_Chen_32888493_3"
#Ferreira_19853236|Kanai|Chen_32888493_[1-4,6]|
unwanted <- "EOSC_Chen_32888493_3|Chen_32888493_6|ASTHMA_CHILD_EXMORE_FinnGen_FinnGenR3_1|K11_KELAUC_FinnGen_FinnGenR3_1|K11_UC_STRICT_FinnGen_FinnGenR3_1|SSC_LopezIsac"
# This monstruous line will more or less accurately define a Label variable that will help us visualise  datasets more easily
# Basically, we
# (1) Remove unwanted files
# (2) Use the full trait definition + Author + Population.
# (3) Use only full trait for FinnGenR3, since "FinnGen" is defined in Trait_long
# (4) Don't expand cytokines
PT.sigviz <- PT.sig[!grepl(unwanted, Trait),][,Label:=str_trunc(paste0( Trait_long, " (",First_Author,") ", Population), width = 60)][,Label:=ifelse(grepl("FinnGen", Label), Trait_long, Label)][,Label:=ifelse(grepl("Interleukin|TRAIL|VEGF|PDGF|CXCL1|MIP1a", Label), paste0(Trait_ID_2.0, " levels (",First_Author, ") ", Population), Label)]
#[, Label:=gsub("ILD", "Interstitial Lung Disease (ILD)", Label)]
QC.sigviz <- QC.sig[Trait %in% unique(PT.sigviz$Trait),]
nrow(QC.sigviz)
# This is a finer remover, as we'll remove datasets that are perfectly fine, but contain biomarkers that are redundant
unwanted.fine <- "Ferreira_19853236|Kanai|Chen_32888493_[1-4]|Vuckovic"
PT.redviz <- PT.sigviz[!grepl(unwanted.fine,Trait)]
QC.redviz <- QC.sig[Trait %in% unique(PT.redviz$Trait),]
nrow(QC.redviz)
hmcol <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582", "#FDDBC7", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061"))(100)
PCorder <-  c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10","PC11","PC12","PC13", "PC14")
M.sig <- acast(PT.sigviz[,c("PC", "Label", "Delta")], Label ~ PC) # PC, Trait, and Delta columns only
M.sig.stars <- acast(PT.sigviz[,c("PC","Label","stars")], Label ~ PC)
M.sig <- M.sig[,PCorder]
M.sig.stars <- M.sig.stars[,PCorder]
range <- max(abs(M.sig))
pheatmap(M.sig, breaks = seq(-range, range, length.out = 100), cluster_cols = FALSE, display_numbers = M.sig.stars, fontsize_row = 8, fontsize_number = 11, color = hmcol)
hmcol <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582", "#FDDBC7", "#F7F7F7", "#D1E5F0", "#92C5DE", "#4393C3", "#2166AC", "#053061"))(100)
PCorder <-  c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10","PC11","PC12","PC13", "PC14")
M.sig <- acast(PT.redviz[,c("PC", "Label", "Delta")], Label ~ PC) # PC, Trait, and Delta columns only
M.sig.stars <- acast(PT.redviz[,c("PC","Label","stars")], Label ~ PC)
M.sig <- M.sig[,PCorder]
M.sig.stars <- M.sig.stars[,PCorder]
range <- max(abs(M.sig))
pheatmap(M.sig, breaks = seq(-range, range, length.out = 100), cluster_cols = FALSE, display_numbers = M.sig.stars, fontsize_row = 8, fontsize_number = 11, color = hmcol)
View(PT.sigviz)
shiny::runApp()
pt <- readRDS("data/cell_basis_trait_projection_v3.RDS")
pt
setnames(pt, "delta", "Delta")
pt
saveRDS("data/cell_basis_trait_projection_v3.RDS")
saveRDS(pt, "data/cell_basis_trait_projection_v3.RDS")
runApp()
shiny::runApp()
uploaded_data <- fread("data/J10_ASTHMA_FinnGen_FinnGenR3_1-ft.tsv")
View(uploaded_data)
missing_cols <- function(x){
valid_headers <- c("CHR", "POS", "REF", "ALT", "SE", "P", "BETA")
if(!all(valid_headers %in% names(x))){
return(FALSE)
}
return(TRUE)
}
missing_cols(uploaded_data)
shiny::runApp()
ast <- fread("data/J10_ASTHMA_FinnGen_FinnGenR3_1-ft.tsv")
ast
runApp()
